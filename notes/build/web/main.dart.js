// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const convert = dart_sdk.convert;
  const _js_helper = dart_sdk._js_helper;
  const _internal = dart_sdk._internal;
  const collection = dart_sdk.collection;
  const html = dart_sdk.html;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const framework = flutter_sdk.src__widgets__framework;
  const app = flutter_sdk.src__material__app;
  const theme_data = flutter_sdk.src__material__theme_data;
  const app_bar_theme = flutter_sdk.src__material__app_bar_theme;
  const colors = flutter_sdk.src__material__colors;
  const text_style = flutter_sdk.src__painting__text_style;
  const text_theme = flutter_sdk.src__material__text_theme;
  const list_tile_theme = flutter_sdk.src__material__list_tile_theme;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const floating_action_button_theme = flutter_sdk.src__material__floating_action_button_theme;
  const editable_text = flutter_sdk.src__widgets__editable_text;
  const navigator = flutter_sdk.src__widgets__navigator;
  const page = flutter_sdk.src__material__page;
  const scaffold = flutter_sdk.src__material__scaffold;
  const app_bar = flutter_sdk.src__material__app_bar;
  const basic = flutter_sdk.src__widgets__basic;
  const icon_button = flutter_sdk.src__material__icon_button;
  const icon = flutter_sdk.src__widgets__icon;
  const icons = flutter_sdk.src__material__icons;
  const text = flutter_sdk.src__widgets__text;
  const theme = flutter_sdk.src__material__theme;
  const divider = flutter_sdk.src__material__divider;
  const floating_action_button = flutter_sdk.src__material__floating_action_button;
  const rounded_rectangle_border = flutter_sdk.src__painting__rounded_rectangle_border;
  const border_radius = flutter_sdk.src__painting__border_radius;
  const container = flutter_sdk.src__widgets__container;
  const flex = flutter_sdk.src__rendering__flex;
  const list_tile = flutter_sdk.src__material__list_tile;
  const scroll_view = flutter_sdk.src__widgets__scroll_view;
  const dialog = flutter_sdk.src__material__dialog;
  const text_field = flutter_sdk.src__material__text_field;
  const input_decorator = flutter_sdk.src__material__input_decorator;
  const input_border = flutter_sdk.src__material__input_border;
  const borders = flutter_sdk.src__painting__borders;
  const text_button = flutter_sdk.src__material__text_button;
  const dismissible = flutter_sdk.src__widgets__dismissible;
  const key = flutter_sdk.src__foundation__key;
  const alignment = flutter_sdk.src__painting__alignment;
  const back_button = flutter_sdk.src__material__back_button;
  const binding = flutter_sdk.src__widgets__binding;
  const plugin_registry = flutter_sdk.src__plugin_registry;
  const platform_channel = flutter_sdk.src__services__platform_channel;
  const message_codecs = flutter_sdk.src__services__message_codecs;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var shared_preferences = Object.create(dart.library);
  var shared_preferences_web = Object.create(dart.library);
  var shared_preferences_platform_interface = Object.create(dart.library);
  var types = Object.create(dart.library);
  var plugin_platform_interface = Object.create(dart.library);
  var method_channel_shared_preferences = Object.create(dart.library);
  var $toString = dartx.toString;
  var $_get = dartx._get;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $_set = dartx._set;
  var $forEach = dartx.forEach;
  var $toLowerCase = dartx.toLowerCase;
  var $contains = dartx.contains;
  var $where = dartx.where;
  var $isNotEmpty = dartx.isNotEmpty;
  var $trim = dartx.trim;
  var $insert = dartx.insert;
  var $remove = dartx.remove;
  var $isEmpty = dartx.isEmpty;
  var $containsKey = dartx.containsKey;
  var $keys = dartx.keys;
  var $length = dartx.length;
  var $split = dartx.split;
  var $first = dartx.first;
  var $indexOf = dartx.indexOf;
  var $cast = dartx.cast;
  var $clear = dartx.clear;
  var $addAll = dartx.addAll;
  var $startsWith = dartx.startsWith;
  var $substring = dartx.substring;
  var $localStorage = dartx.localStorage;
  var $removeWhere = dartx.removeWhere;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    IdentityMapOfString$String: () => (T.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),
    ListOfNote: () => (T.ListOfNote = dart.constFn(core.List$(main.Note)))(),
    IdentityMapOfString$ListOfNote: () => (T.IdentityMapOfString$ListOfNote = dart.constFn(_js_helper.IdentityMap$(core.String, T.ListOfNote())))(),
    JSArrayOfNote: () => (T.JSArrayOfNote = dart.constFn(_interceptors.JSArray$(main.Note)))(),
    MapOfString$dynamic: () => (T.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    StringToNote: () => (T.StringToNote = dart.constFn(dart.fnType(main.Note, [core.String])))(),
    StringAnddynamicTovoid: () => (T.StringAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [core.String, dart.dynamic])))(),
    MapEntryOfString$ListOfString: () => (T.MapEntryOfString$ListOfString = dart.constFn(core.MapEntry$(core.String, T.ListOfString())))(),
    NoteToString: () => (T.NoteToString = dart.constFn(dart.fnType(core.String, [main.Note])))(),
    StringAndListOfNoteToMapEntryOfString$ListOfString: () => (T.StringAndListOfNoteToMapEntryOfString$ListOfString = dart.constFn(dart.fnType(T.MapEntryOfString$ListOfString(), [core.String, T.ListOfNote()])))(),
    NoteTobool: () => (T.NoteTobool = dart.constFn(dart.fnType(core.bool, [main.Note])))(),
    BuildContextToNoteEditorPage: () => (T.BuildContextToNoteEditorPage = dart.constFn(dart.fnType(main.NoteEditorPage, [framework.BuildContext])))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    StringToListTile: () => (T.StringToListTile = dart.constFn(dart.fnType(list_tile.ListTile, [core.String])))(),
    BuildContextToAlertDialog: () => (T.BuildContextToAlertDialog = dart.constFn(dart.fnType(dialog.AlertDialog, [framework.BuildContext])))(),
    BuildContextAndintToDivider: () => (T.BuildContextAndintToDivider = dart.constFn(dart.fnType(divider.Divider, [framework.BuildContext, core.int])))(),
    ValueKeyOfString: () => (T.ValueKeyOfString = dart.constFn(key.ValueKey$(core.String)))(),
    DismissDirectionTovoid: () => (T.DismissDirectionTovoid = dart.constFn(dart.fnType(dart.void, [dismissible.DismissDirection])))(),
    BuildContextAndintToDismissible: () => (T.BuildContextAndintToDismissible = dart.constFn(dart.fnType(dismissible.Dismissible, [framework.BuildContext, core.int])))(),
    CompleterOfSharedPreferences: () => (T.CompleterOfSharedPreferences = dart.constFn(async.Completer$(shared_preferences.SharedPreferences)))(),
    LinkedHashSetOfString: () => (T.LinkedHashSetOfString = dart.constFn(collection.LinkedHashSet$(core.String)))(),
    boolN: () => (T.boolN = dart.constFn(dart.nullable(core.bool)))(),
    intN: () => (T.intN = dart.constFn(dart.nullable(core.int)))(),
    doubleN: () => (T.doubleN = dart.constFn(dart.nullable(core.double)))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    ListN: () => (T.ListN = dart.constFn(dart.nullable(core.List)))(),
    ListNOfString: () => (T.ListNOfString = dart.constFn(dart.nullable(T.ListOfString())))(),
    IdentityMapOfString$Object: () => (T.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),
    MapOfString$Object: () => (T.MapOfString$Object = dart.constFn(core.Map$(core.String, core.Object)))(),
    MapEntryOfString$Object: () => (T.MapEntryOfString$Object = dart.constFn(core.MapEntry$(core.String, core.Object)))(),
    StringAndObjectToMapEntryOfString$Object: () => (T.StringAndObjectToMapEntryOfString$Object = dart.constFn(dart.fnType(T.MapEntryOfString$Object(), [core.String, core.Object])))(),
    StringTobool: () => (T.StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    ExpandoOfObject: () => (T.ExpandoOfObject = dart.constFn(core.Expando$(core.Object)))(),
    LinkedHashMapOfString$Object: () => (T.LinkedHashMapOfString$Object = dart.constFn(collection.LinkedHashMap$(core.String, core.Object)))(),
    StringAndObjectTobool: () => (T.StringAndObjectTobool = dart.constFn(dart.fnType(core.bool, [core.String, core.Object])))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidTovoid());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294967031
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4280032286
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 12,
        [EdgeInsets_right]: 12,
        [EdgeInsets_top]: 12,
        [EdgeInsets_left]: 12
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 24,
        [EdgeInsets_right]: 20,
        [EdgeInsets_top]: 24,
        [EdgeInsets_left]: 20
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: core.Object.prototype
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[8] || CT.C8
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[7] || CT.C7,
        [MethodChannel_name]: "plugins.flutter.io/shared_preferences"
      });
    }
  }, false);
  var C = Array(9).fill(void 0);
  var I = [
    "file:///zapp/project/lib/main.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences-2.2.2/lib/shared_preferences.dart",
    "package:shared_preferences/shared_preferences.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.6/lib/plugin_platform_interface.dart",
    "package:plugin_platform_interface/plugin_platform_interface.dart",
    "package:shared_preferences_platform_interface/shared_preferences_platform_interface.dart",
    "package:shared_preferences_web/shared_preferences_web.dart",
    "package:shared_preferences_platform_interface/types.dart",
    "package:shared_preferences_platform_interface/method_channel_shared_preferences.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T.VoidToNull())});
    });
  };
  var text$ = dart.privateName(main, "Note.text");
  main.Note = class Note extends core.Object {
    get text() {
      return this[text$];
    }
    set text(value) {
      this[text$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let text = opts && 'text' in opts ? opts.text : null;
      return new main.Note.new({text: text});
    }
    static fromJson(jsonStr) {
      let t0;
      let map = convert.json.decode(jsonStr);
      return new main.Note.new({text: core.String.as((t0 = dart.dsend(map, '_get', ["text"]), t0 == null ? "" : t0))});
    }
    static ['_#fromJson#tearOff'](jsonStr) {
      return main.Note.fromJson(jsonStr);
    }
    toJson() {
      return convert.json.encode(new (T.IdentityMapOfString$String()).from(["text", this.text]));
    }
  };
  (main.Note.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : null;
    this[text$] = text;
    ;
  }).prototype = main.Note.prototype;
  dart.addTypeTests(main.Note);
  dart.addTypeCaches(main.Note);
  dart.setMethodSignature(main.Note, () => ({
    __proto__: dart.getMethods(main.Note.__proto__),
    toJson: dart.fnType(core.String, [])
  }));
  dart.setStaticMethodSignature(main.Note, () => ['fromJson']);
  dart.setLibraryUri(main.Note, I[0]);
  dart.setFieldSignature(main.Note, () => ({
    __proto__: dart.getFields(main.Note.__proto__),
    text: dart.fieldType(core.String)
  }));
  var isDarkMode$ = dart.privateName(main, "MyApp.isDarkMode");
  main.MyApp = class MyApp extends framework.StatefulWidget {
    get isDarkMode() {
      return this[isDarkMode$];
    }
    set isDarkMode(value) {
      super.isDarkMode = value;
    }
    static ['_#new#tearOff'](opts) {
      let isDarkMode = opts && 'isDarkMode' in opts ? opts.isDarkMode : null;
      return new main.MyApp.new({isDarkMode: isDarkMode});
    }
    createState() {
      return new main._MyAppState.new();
    }
  };
  (main.MyApp.new = function(opts) {
    let isDarkMode = opts && 'isDarkMode' in opts ? opts.isDarkMode : null;
    this[isDarkMode$] = isDarkMode;
    main.MyApp.__proto__.new.call(this);
    ;
  }).prototype = main.MyApp.prototype;
  dart.addTypeTests(main.MyApp);
  dart.addTypeCaches(main.MyApp);
  dart.setMethodSignature(main.MyApp, () => ({
    __proto__: dart.getMethods(main.MyApp.__proto__),
    createState: dart.fnType(framework.State$(main.MyApp), [])
  }));
  dart.setLibraryUri(main.MyApp, I[0]);
  dart.setFieldSignature(main.MyApp, () => ({
    __proto__: dart.getFields(main.MyApp.__proto__),
    isDarkMode: dart.finalFieldType(core.bool)
  }));
  var ___MyAppState_isDark = dart.privateName(main, "_#_MyAppState#isDark");
  var _darkTheme = dart.privateName(main, "_darkTheme");
  var _lightTheme = dart.privateName(main, "_lightTheme");
  var Color_value = dart.privateName(ui, "Color.value");
  main._MyAppState = class _MyAppState extends framework.State$(main.MyApp) {
    get isDark() {
      let t0;
      t0 = this[___MyAppState_isDark];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("isDark")) : t0;
    }
    set isDark(isDark$35param) {
      this[___MyAppState_isDark] = isDark$35param;
    }
    initState() {
      super.initState();
      this.isDark = this.widget.isDarkMode;
    }
    toggleTheme() {
      return async.async(dart.void, (function* toggleTheme() {
        let prefs = (yield shared_preferences.SharedPreferences.getInstance());
        this.setState(dart.fn(() => {
          this.isDark = !this.isDark;
        }, T.VoidTovoid()));
        prefs.setBool("darkMode", this.isDark);
      }).bind(this));
    }
    build(context) {
      return new app.MaterialApp.new({title: "Apple Notes Clone", debugShowCheckedModeBanner: false, theme: this.isDark ? this[_darkTheme]() : this[_lightTheme](), home: new main.NotesListPage.new({onToggleTheme: dart.bind(this, 'toggleTheme')})});
    }
    [_lightTheme]() {
      return theme_data.ThemeData.new({brightness: ui.Brightness.light, scaffoldBackgroundColor: C[1] || CT.C1, appBarTheme: new app_bar_theme.AppBarTheme.new({backgroundColor: C[1] || CT.C1, foregroundColor: colors.Colors.black87, elevation: 0, titleTextStyle: new text_style.TextStyle.new({color: colors.Colors.black, fontWeight: ui.FontWeight.w600, fontSize: 20, fontFamily: "SFProDisplay"})}), textTheme: new text_theme.TextTheme.new({bodyLarge: new text_style.TextStyle.new({fontSize: 17, color: colors.Colors.black, fontFamily: "SFProDisplay"}), bodyMedium: new text_style.TextStyle.new({fontSize: 15, fontFamily: "SFProDisplay"})}), listTileTheme: new list_tile_theme.ListTileThemeData.new({tileColor: colors.Colors.transparent, contentPadding: new edge_insets.EdgeInsets.symmetric({horizontal: 16, vertical: 8}), iconColor: colors.Colors.black54}), floatingActionButtonTheme: new floating_action_button_theme.FloatingActionButtonThemeData.new({backgroundColor: new ui.Color.new(4294956554), foregroundColor: colors.Colors.black, elevation: 0}), dividerColor: colors.Colors.grey.shade300, useMaterial3: false});
    }
    [_darkTheme]() {
      return theme_data.ThemeData.dark().copyWith({scaffoldBackgroundColor: C[2] || CT.C2, appBarTheme: new app_bar_theme.AppBarTheme.new({backgroundColor: C[2] || CT.C2, foregroundColor: colors.Colors.white, elevation: 0, titleTextStyle: new text_style.TextStyle.new({color: colors.Colors.white, fontWeight: ui.FontWeight.w600, fontSize: 20, fontFamily: "SFProDisplay"})}), textTheme: new text_theme.TextTheme.new({bodyLarge: new text_style.TextStyle.new({fontSize: 17, color: colors.Colors.white, fontFamily: "SFProDisplay"}), bodyMedium: new text_style.TextStyle.new({fontSize: 15, fontFamily: "SFProDisplay"})}), listTileTheme: new list_tile_theme.ListTileThemeData.new({tileColor: colors.Colors.transparent, iconColor: colors.Colors.white70, contentPadding: new edge_insets.EdgeInsets.symmetric({horizontal: 16, vertical: 8})}), floatingActionButtonTheme: new floating_action_button_theme.FloatingActionButtonThemeData.new({backgroundColor: new ui.Color.new(4294956554), foregroundColor: colors.Colors.black, elevation: 0}), dividerColor: colors.Colors.grey.shade800, useMaterial3: false});
    }
    static ['_#new#tearOff']() {
      return new main._MyAppState.new();
    }
  };
  (main._MyAppState.new = function() {
    this[___MyAppState_isDark] = null;
    main._MyAppState.__proto__.new.call(this);
    ;
  }).prototype = main._MyAppState.prototype;
  dart.addTypeTests(main._MyAppState);
  dart.addTypeCaches(main._MyAppState);
  dart.setMethodSignature(main._MyAppState, () => ({
    __proto__: dart.getMethods(main._MyAppState.__proto__),
    toggleTheme: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_lightTheme]: dart.fnType(theme_data.ThemeData, []),
    [_darkTheme]: dart.fnType(theme_data.ThemeData, [])
  }));
  dart.setGetterSignature(main._MyAppState, () => ({
    __proto__: dart.getGetters(main._MyAppState.__proto__),
    isDark: core.bool
  }));
  dart.setSetterSignature(main._MyAppState, () => ({
    __proto__: dart.getSetters(main._MyAppState.__proto__),
    isDark: core.bool
  }));
  dart.setLibraryUri(main._MyAppState, I[0]);
  dart.setFieldSignature(main._MyAppState, () => ({
    __proto__: dart.getFields(main._MyAppState.__proto__),
    [___MyAppState_isDark]: dart.fieldType(dart.nullable(core.bool))
  }));
  var onToggleTheme$ = dart.privateName(main, "NotesListPage.onToggleTheme");
  main.NotesListPage = class NotesListPage extends framework.StatefulWidget {
    get onToggleTheme() {
      return this[onToggleTheme$];
    }
    set onToggleTheme(value) {
      super.onToggleTheme = value;
    }
    static ['_#new#tearOff'](opts) {
      let onToggleTheme = opts && 'onToggleTheme' in opts ? opts.onToggleTheme : null;
      return new main.NotesListPage.new({onToggleTheme: onToggleTheme});
    }
    createState() {
      return new main._NotesListPageState.new();
    }
  };
  (main.NotesListPage.new = function(opts) {
    let onToggleTheme = opts && 'onToggleTheme' in opts ? opts.onToggleTheme : null;
    this[onToggleTheme$] = onToggleTheme;
    main.NotesListPage.__proto__.new.call(this);
    ;
  }).prototype = main.NotesListPage.prototype;
  dart.addTypeTests(main.NotesListPage);
  dart.addTypeCaches(main.NotesListPage);
  dart.setMethodSignature(main.NotesListPage, () => ({
    __proto__: dart.getMethods(main.NotesListPage.__proto__),
    createState: dart.fnType(main._NotesListPageState, [])
  }));
  dart.setLibraryUri(main.NotesListPage, I[0]);
  dart.setFieldSignature(main.NotesListPage, () => ({
    __proto__: dart.getFields(main.NotesListPage.__proto__),
    onToggleTheme: dart.finalFieldType(dart.fnType(dart.void, []))
  }));
  var _searchController = dart.privateName(main, "_searchController");
  var _newFolderController = dart.privateName(main, "_newFolderController");
  var _loadNotes = dart.privateName(main, "_loadNotes");
  var _filterNotes = dart.privateName(main, "_filterNotes");
  var _saveNotes = dart.privateName(main, "_saveNotes");
  var _openEditor = dart.privateName(main, "_openEditor");
  var _deleteNote = dart.privateName(main, "_deleteNote");
  var _addFolder = dart.privateName(main, "_addFolder");
  var _buildSidebar = dart.privateName(main, "_buildSidebar");
  var _buildNoteListArea = dart.privateName(main, "_buildNoteListArea");
  var _showAddFolderDialog = dart.privateName(main, "_showAddFolderDialog");
  var _getFolderIcon = dart.privateName(main, "_getFolderIcon");
  var _confirmDeleteFolder = dart.privateName(main, "_confirmDeleteFolder");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  main._NotesListPageState = class _NotesListPageState extends framework.State$(main.NotesListPage) {
    get currentNotes() {
      let t0;
      t0 = this.allFolders[$_get](this.currentFolder);
      return t0 == null ? T.JSArrayOfNote().of([]) : t0;
    }
    initState() {
      super.initState();
      this[_loadNotes]();
      this[_searchController].addListener(dart.bind(this, _filterNotes));
    }
    [_loadNotes]() {
      return async.async(dart.void, (function* _loadNotes() {
        let prefs = (yield shared_preferences.SharedPreferences.getInstance());
        let raw = prefs.getString("folders");
        this.allFolders = new (T.IdentityMapOfString$ListOfNote()).from(["Default", T.JSArrayOfNote().of([]), "Work", T.JSArrayOfNote().of([]), "Personal", T.JSArrayOfNote().of([]), "Ideas", T.JSArrayOfNote().of([]), "Notes", T.JSArrayOfNote().of([])]);
        if (raw != null) {
          let map = T.MapOfString$dynamic().as(convert.json.decode(raw));
          map[$forEach](dart.fn((folder, notesJson) => {
            let notes = T.ListOfString().from(core.Iterable.as(notesJson));
            this.allFolders[$_set](folder, notes[$map](main.Note, dart.fn(e => main.Note.fromJson(e), T.StringToNote()))[$toList]());
          }, T.StringAnddynamicTovoid()));
        }
        yield this[_saveNotes]();
        this[_filterNotes]();
      }).bind(this));
    }
    [_saveNotes]() {
      return async.async(dart.void, (function* _saveNotes() {
        let prefs = (yield shared_preferences.SharedPreferences.getInstance());
        let rawMap = this.allFolders[$map](core.String, T.ListOfString(), dart.fn((folder, notes) => new (T.MapEntryOfString$ListOfString()).__(folder, notes[$map](core.String, dart.fn(n => n.toJson(), T.NoteToString()))[$toList]()), T.StringAndListOfNoteToMapEntryOfString$ListOfString()));
        yield prefs.setString("folders", convert.json.encode(rawMap));
      }).bind(this));
    }
    [_filterNotes]() {
      let query = this[_searchController].text[$toLowerCase]();
      let all = this.currentNotes;
      this.setState(dart.fn(() => {
        this.filteredNotes = all[$where](dart.fn(note => note.text[$toLowerCase]()[$contains](query), T.NoteTobool()))[$toList]();
      }, T.VoidTovoid()));
    }
    [_openEditor](opts) {
      let existingNote = opts && 'existingNote' in opts ? opts.existingNote : null;
      let index = opts && 'index' in opts ? opts.index : null;
      return async.async(dart.void, (function* _openEditor() {
        let result = (yield navigator.Navigator.push(dart.dynamic, this.context, new page.MaterialPageRoute.new({builder: dart.fn(_ => {
            let t0, t0$;
            return new main.NoteEditorPage.new({initialText: (t0$ = (t0 = existingNote, t0 == null ? null : t0.text), t0$ == null ? "" : t0$)});
          }, T.BuildContextToNoteEditorPage())})));
        if (result != null && main.Note.is(result) && result.text[$trim]()[$isNotEmpty]) {
          this.setState(dart.fn(() => {
            if (index != null) {
              dart.nullCheck(this.allFolders[$_get](this.currentFolder))[$_set](index, result);
            } else {
              dart.nullCheck(this.allFolders[$_get](this.currentFolder))[$insert](0, result);
            }
            this[_filterNotes]();
          }, T.VoidTovoid()));
          this[_saveNotes]();
        }
      }).bind(this));
    }
    [_deleteNote](index) {
      this.setState(dart.fn(() => {
        let original = this.filteredNotes[$_get](index);
        dart.nullCheck(this.allFolders[$_get](this.currentFolder))[$remove](original);
        this[_filterNotes]();
      }, T.VoidTovoid()));
      this[_saveNotes]();
    }
    [_addFolder](folderName) {
      folderName = folderName[$trim]();
      if (folderName[$isEmpty] || this.allFolders[$containsKey](folderName)) return;
      this.setState(dart.fn(() => {
        this.allFolders[$_set](folderName, T.JSArrayOfNote().of([]));
        this.currentFolder = folderName;
        this[_newFolderController].clear();
        this[_filterNotes]();
      }, T.VoidTovoid()));
      this[_saveNotes]();
      navigator.Navigator.pop(T.ObjectN(), this.context);
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new basic.Row.new({children: T.JSArrayOfWidget().of([new icon_button.IconButton.new({icon: new icon.Icon.new(icons.Icons.menu), onPressed: dart.fn(() => {
                  this.setState(dart.fn(() => this.isSidebarCollapsed = !this.isSidebarCollapsed, T.VoidTovoid()));
                }, T.VoidTovoid())}), new text.Text.new("Notes")])}), actions: T.JSArrayOfWidget().of([new icon_button.IconButton.new({icon: new icon.Icon.new(theme.Theme.of(context).brightness === ui.Brightness.dark ? icons.Icons.wb_sunny_outlined : icons.Icons.nightlight_round), onPressed: this.widget.onToggleTheme, tooltip: "Toggle Theme"})])}), body: new basic.Row.new({children: (() => {
            let t0 = T.JSArrayOfWidget().of([]);
            if (!this.isSidebarCollapsed) t0.push(this[_buildSidebar]());
            if (!this.isSidebarCollapsed) t0.push(new divider.VerticalDivider.new({width: 1}));
            t0.push(new basic.Expanded.new({child: this[_buildNoteListArea]()}));
            return t0;
          })()}), floatingActionButton: new floating_action_button.FloatingActionButton.new({onPressed: dart.bind(this, _openEditor), shape: new rounded_rectangle_border.RoundedRectangleBorder.new({borderRadius: new border_radius.BorderRadius.circular(30)}), child: new icon.Icon.new(icons.Icons.add, {color: colors.Colors.black, size: 28}), backgroundColor: new ui.Color.new(4294956554), elevation: 0})});
    }
    [_buildSidebar]() {
      let t1;
      return new container.Container.new({width: 200, color: theme.Theme.of(this.context).brightness === ui.Brightness.dark ? colors.Colors.grey.shade900 : colors.Colors.grey.shade100, child: new basic.Column.new({crossAxisAlignment: flex.CrossAxisAlignment.start, children: T.JSArrayOfWidget().of([new list_tile.ListTile.new({title: new text.Text.new("Folders", {style: (t1 = theme.Theme.of(this.context).textTheme.bodyLarge, t1 == null ? null : t1.copyWith({fontWeight: ui.FontWeight.bold}))}), trailing: new icon_button.IconButton.new({icon: new icon.Icon.new(icons.Icons.add, {color: theme.Theme.of(this.context).iconTheme.color}), onPressed: dart.bind(this, _showAddFolderDialog)})}), new basic.Expanded.new({child: new scroll_view.ListView.new({children: this.allFolders[$keys][$map](list_tile.ListTile, dart.fn(folder => {
                  let selected = folder === this.currentFolder;
                  return new list_tile.ListTile.new({title: new text.Text.new(this[_getFolderIcon](folder) + " " + folder, {style: theme.Theme.of(this.context).textTheme.bodyLarge}), selected: selected, onTap: dart.fn(() => {
                      this.setState(dart.fn(() => {
                        this.currentFolder = folder;
                        this[_filterNotes]();
                      }, T.VoidTovoid()));
                    }, T.VoidTovoid()), trailing: folder === "Default" ? null : new icon_button.IconButton.new({icon: new icon.Icon.new(icons.Icons.delete_outline, {color: colors.Colors.red}), onPressed: dart.fn(() => this[_confirmDeleteFolder](folder), T.VoidTovoid())})});
                }, T.StringToListTile()))[$toList]()})})])})});
    }
    [_showAddFolderDialog]() {
      let t1, t1$;
      let textColor = (t1$ = (t1 = theme.Theme.of(this.context).textTheme.bodyLarge, t1 == null ? null : t1.color), t1$ == null ? colors.Colors.black : t1$);
      let isDark = theme.Theme.of(this.context).brightness === ui.Brightness.dark;
      dialog.showDialog(dart.dynamic, {context: this.context, builder: dart.fn(_ => new dialog.AlertDialog.new({backgroundColor: theme.Theme.of(this.context).scaffoldBackgroundColor, title: new text.Text.new("New Folder", {style: new text_style.TextStyle.new({color: textColor})}), content: new text_field.TextField.new({controller: this[_newFolderController], autofocus: true, style: new text_style.TextStyle.new({color: textColor}), decoration: new input_decorator.InputDecoration.new({hintText: "Folder name", hintStyle: new text_style.TextStyle.new({color: textColor.withOpacity(0.4)}), enabledBorder: new input_border.UnderlineInputBorder.new({borderSide: new borders.BorderSide.new({color: textColor.withOpacity(0.3)})}), focusedBorder: new input_border.UnderlineInputBorder.new({borderSide: new borders.BorderSide.new({color: new ui.Color.new(4294956554)})})})}), actions: T.JSArrayOfWidget().of([new text_button.TextButton.new({onPressed: dart.fn(() => navigator.Navigator.pop(T.ObjectN(), this.context), T.VoidTovoid()), child: new text.Text.new("Cancel", {style: new text_style.TextStyle.new({color: textColor})})}), new text_button.TextButton.new({onPressed: dart.fn(() => {
                this[_addFolder](this[_newFolderController].text);
                navigator.Navigator.pop(T.ObjectN(), this.context);
              }, T.VoidTovoid()), child: new text.Text.new("Create", {style: new text_style.TextStyle.new({color: new ui.Color.new(4294956554)})})})])}), T.BuildContextToAlertDialog())});
    }
    [_confirmDeleteFolder](folder) {
      let t1, t1$;
      let textColor = (t1$ = (t1 = theme.Theme.of(this.context).textTheme.bodyLarge, t1 == null ? null : t1.color), t1$ == null ? colors.Colors.black : t1$);
      let bgColor = theme.Theme.of(this.context).scaffoldBackgroundColor;
      dialog.showDialog(dart.dynamic, {context: this.context, builder: dart.fn(_ => new dialog.AlertDialog.new({backgroundColor: bgColor, title: new text.Text.new("Delete \"" + folder + "\"?", {style: new text_style.TextStyle.new({color: textColor})}), content: new text.Text.new("All notes in this folder will also be deleted.", {style: new text_style.TextStyle.new({color: textColor.withOpacity(0.8)})}), actions: T.JSArrayOfWidget().of([new text_button.TextButton.new({onPressed: dart.fn(() => navigator.Navigator.pop(T.ObjectN(), this.context), T.VoidTovoid()), child: new text.Text.new("Cancel", {style: new text_style.TextStyle.new({color: textColor})})}), new text_button.TextButton.new({onPressed: dart.fn(() => {
                this.setState(dart.fn(() => {
                  this.allFolders[$remove](folder);
                  if (this.currentFolder === folder) {
                    this.currentFolder = "Default";
                  }
                  this[_filterNotes]();
                  this[_saveNotes]();
                }, T.VoidTovoid()));
                navigator.Navigator.pop(T.ObjectN(), this.context);
              }, T.VoidTovoid()), child: new text.Text.new("Delete", {style: new text_style.TextStyle.new({color: colors.Colors.red})})})])}), T.BuildContextToAlertDialog())});
    }
    [_getFolderIcon](name) {
      let lower = name[$toLowerCase]();
      if (lower === "default") return "📁";
      if (lower === "work") return "💼";
      if (lower === "personal") return "🏠";
      if (lower === "ideas") return "🧠";
      if (lower === "notes") return "📝";
      return "📂";
    }
    [_buildNoteListArea]() {
      return new basic.Column.new({children: T.JSArrayOfWidget().of([new basic.Padding.new({padding: C[3] || CT.C3, child: new text_field.TextField.new({controller: this[_searchController], decoration: new input_decorator.InputDecoration.new({hintText: "Search notes...", prefixIcon: new icon.Icon.new(icons.Icons.search), filled: true, fillColor: theme.Theme.of(this.context).brightness === ui.Brightness.dark ? colors.Colors.grey.shade800 : colors.Colors.grey.shade200, contentPadding: new edge_insets.EdgeInsets.symmetric({horizontal: 16}), border: new input_border.OutlineInputBorder.new({borderRadius: new border_radius.BorderRadius.circular(12), borderSide: borders.BorderSide.none})})})}), new basic.Expanded.new({child: new scroll_view.ListView.separated({itemCount: this.filteredNotes[$length], separatorBuilder: dart.fn((_, __) => new divider.Divider.new({height: 1}), T.BuildContextAndintToDivider()), itemBuilder: dart.fn((context, index) => {
                let t1, t1$;
                let note = this.filteredNotes[$_get](index);
                let lines = note.text[$split]("\n");
                return new dismissible.Dismissible.new({key: new (T.ValueKeyOfString()).new(note.text + index[$toString]()), direction: dismissible.DismissDirection.endToStart, background: new container.Container.new({alignment: alignment.Alignment.centerRight, color: colors.Colors.red.shade400, padding: new edge_insets.EdgeInsets.symmetric({horizontal: 20}), child: new icon.Icon.new(icons.Icons.delete, {color: colors.Colors.white})}), onDismissed: dart.fn(_ => this[_deleteNote](index), T.DismissDirectionTovoid()), child: new list_tile.ListTile.new({title: new text.Text.new(lines[$first], {style: (t1 = theme.Theme.of(context).textTheme.bodyLarge, t1 == null ? null : t1.copyWith({fontWeight: ui.FontWeight.w600}))}), subtitle: lines[$length] > 1 ? new text.Text.new(lines[$_get](1), {style: (t1$ = theme.Theme.of(context).textTheme.bodyMedium, t1$ == null ? null : t1$.copyWith({color: theme.Theme.of(context).brightness === ui.Brightness.dark ? colors.Colors.white70 : colors.Colors.black54}))}) : null, onTap: dart.fn(() => {
                      let originalIndex = dart.nullCheck(this.allFolders[$_get](this.currentFolder))[$indexOf](note);
                      this[_openEditor]({existingNote: note, index: originalIndex});
                    }, T.VoidTovoid())})});
              }, T.BuildContextAndintToDismissible())})})])});
    }
    static ['_#new#tearOff']() {
      return new main._NotesListPageState.new();
    }
  };
  (main._NotesListPageState.new = function() {
    this.allFolders = new (T.IdentityMapOfString$ListOfNote()).new();
    this.currentFolder = "Default";
    this.filteredNotes = T.JSArrayOfNote().of([]);
    this[_searchController] = new editable_text.TextEditingController.new();
    this[_newFolderController] = new editable_text.TextEditingController.new();
    this.isSidebarCollapsed = false;
    main._NotesListPageState.__proto__.new.call(this);
    ;
  }).prototype = main._NotesListPageState.prototype;
  dart.addTypeTests(main._NotesListPageState);
  dart.addTypeCaches(main._NotesListPageState);
  dart.setMethodSignature(main._NotesListPageState, () => ({
    __proto__: dart.getMethods(main._NotesListPageState.__proto__),
    [_loadNotes]: dart.fnType(async.Future$(dart.void), []),
    [_saveNotes]: dart.fnType(async.Future$(dart.void), []),
    [_filterNotes]: dart.fnType(dart.void, []),
    [_openEditor]: dart.fnType(dart.void, [], {existingNote: dart.nullable(main.Note), index: dart.nullable(core.int)}, {}),
    [_deleteNote]: dart.fnType(dart.void, [core.int]),
    [_addFolder]: dart.fnType(dart.void, [core.String]),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_buildSidebar]: dart.fnType(framework.Widget, []),
    [_showAddFolderDialog]: dart.fnType(dart.void, []),
    [_confirmDeleteFolder]: dart.fnType(dart.void, [core.String]),
    [_getFolderIcon]: dart.fnType(core.String, [core.String]),
    [_buildNoteListArea]: dart.fnType(framework.Widget, [])
  }));
  dart.setGetterSignature(main._NotesListPageState, () => ({
    __proto__: dart.getGetters(main._NotesListPageState.__proto__),
    currentNotes: core.List$(main.Note)
  }));
  dart.setLibraryUri(main._NotesListPageState, I[0]);
  dart.setFieldSignature(main._NotesListPageState, () => ({
    __proto__: dart.getFields(main._NotesListPageState.__proto__),
    allFolders: dart.fieldType(core.Map$(core.String, core.List$(main.Note))),
    currentFolder: dart.fieldType(core.String),
    filteredNotes: dart.fieldType(core.List$(main.Note)),
    [_searchController]: dart.finalFieldType(editable_text.TextEditingController),
    [_newFolderController]: dart.finalFieldType(editable_text.TextEditingController),
    isSidebarCollapsed: dart.fieldType(core.bool)
  }));
  var initialText$ = dart.privateName(main, "NoteEditorPage.initialText");
  main.NoteEditorPage = class NoteEditorPage extends framework.StatefulWidget {
    get initialText() {
      return this[initialText$];
    }
    set initialText(value) {
      super.initialText = value;
    }
    static ['_#new#tearOff'](opts) {
      let initialText = opts && 'initialText' in opts ? opts.initialText : null;
      return new main.NoteEditorPage.new({initialText: initialText});
    }
    createState() {
      return new main._NoteEditorPageState.new();
    }
  };
  (main.NoteEditorPage.new = function(opts) {
    let initialText = opts && 'initialText' in opts ? opts.initialText : null;
    this[initialText$] = initialText;
    main.NoteEditorPage.__proto__.new.call(this);
    ;
  }).prototype = main.NoteEditorPage.prototype;
  dart.addTypeTests(main.NoteEditorPage);
  dart.addTypeCaches(main.NoteEditorPage);
  dart.setMethodSignature(main.NoteEditorPage, () => ({
    __proto__: dart.getMethods(main.NoteEditorPage.__proto__),
    createState: dart.fnType(main._NoteEditorPageState, [])
  }));
  dart.setLibraryUri(main.NoteEditorPage, I[0]);
  dart.setFieldSignature(main.NoteEditorPage, () => ({
    __proto__: dart.getFields(main.NoteEditorPage.__proto__),
    initialText: dart.finalFieldType(core.String)
  }));
  var ___NoteEditorPageState__textController = dart.privateName(main, "_#_NoteEditorPageState#_textController");
  var _textController = dart.privateName(main, "_textController");
  var _saveAndExit = dart.privateName(main, "_saveAndExit");
  main._NoteEditorPageState = class _NoteEditorPageState extends framework.State$(main.NoteEditorPage) {
    get [_textController]() {
      let t1;
      t1 = this[___NoteEditorPageState__textController];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_textController")) : t1;
    }
    set [_textController](_textController$35param) {
      this[___NoteEditorPageState__textController] = _textController$35param;
    }
    initState() {
      super.initState();
      this[_textController] = new editable_text.TextEditingController.new({text: this.widget.initialText});
    }
    [_saveAndExit]() {
      let text = this[_textController].text[$trim]();
      if (text[$isNotEmpty]) {
        navigator.Navigator.pop(main.Note, this.context, new main.Note.new({text: text}));
      } else {
        navigator.Navigator.pop(T.ObjectN(), this.context);
      }
    }
    dispose() {
      this[_textController].dispose();
      super.dispose();
    }
    build(context) {
      let t1, t1$, t1$0, t1$1;
      let textColor = (t1$ = (t1 = theme.Theme.of(context).textTheme.bodyLarge, t1 == null ? null : t1.color), t1$ == null ? colors.Colors.black : t1$);
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({leading: new back_button.BackButton.new({onPressed: dart.bind(this, _saveAndExit)}), title: new text.Text.new(""), elevation: 0, backgroundColor: theme.Theme.of(context).scaffoldBackgroundColor}), body: new basic.Padding.new({padding: C[4] || CT.C4, child: new text_field.TextField.new({controller: this[_textController], maxLines: null, autofocus: true, style: (t1$0 = theme.Theme.of(context).textTheme.bodyLarge, t1$0 == null ? null : t1$0.copyWith({fontSize: 18, fontWeight: ui.FontWeight.w400})), cursorColor: new ui.Color.new(4294956554), decoration: new input_decorator.InputDecoration.collapsed({hintText: "Start typing your note...", hintStyle: (t1$1 = theme.Theme.of(context).textTheme.bodyLarge, t1$1 == null ? null : t1$1.copyWith({color: textColor.withOpacity(0.4), fontSize: 18}))})})})});
    }
    static ['_#new#tearOff']() {
      return new main._NoteEditorPageState.new();
    }
  };
  (main._NoteEditorPageState.new = function() {
    this[___NoteEditorPageState__textController] = null;
    main._NoteEditorPageState.__proto__.new.call(this);
    ;
  }).prototype = main._NoteEditorPageState.prototype;
  dart.addTypeTests(main._NoteEditorPageState);
  dart.addTypeCaches(main._NoteEditorPageState);
  dart.setMethodSignature(main._NoteEditorPageState, () => ({
    __proto__: dart.getMethods(main._NoteEditorPageState.__proto__),
    [_saveAndExit]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(main._NoteEditorPageState, () => ({
    __proto__: dart.getGetters(main._NoteEditorPageState.__proto__),
    [_textController]: editable_text.TextEditingController
  }));
  dart.setSetterSignature(main._NoteEditorPageState, () => ({
    __proto__: dart.getSetters(main._NoteEditorPageState.__proto__),
    [_textController]: editable_text.TextEditingController
  }));
  dart.setLibraryUri(main._NoteEditorPageState, I[0]);
  dart.setFieldSignature(main._NoteEditorPageState, () => ({
    __proto__: dart.getFields(main._NoteEditorPageState.__proto__),
    [___NoteEditorPageState__textController]: dart.fieldType(dart.nullable(editable_text.TextEditingController))
  }));
  main.main = function main$0() {
    return async.async(dart.void, function* main$() {
      let t1;
      binding.WidgetsFlutterBinding.ensureInitialized();
      let prefs = (yield shared_preferences.SharedPreferences.getInstance());
      let isDarkMode = (t1 = prefs.getBool("darkMode"), t1 == null ? false : t1);
      binding.runApp(new main.MyApp.new({isDarkMode: isDarkMode}));
    });
  };
  web_plugin_registrant.registerPlugins = function registerPlugins(pluginRegistrar = null) {
    let t1;
    let registrar = (t1 = pluginRegistrar, t1 == null ? plugin_registry.webPluginRegistrar : t1);
    shared_preferences_web.SharedPreferencesPlugin.registerWith(registrar);
    registrar.registerMessageHandler();
  };
  var _preferenceCache$ = dart.privateName(shared_preferences, "_preferenceCache");
  var _setValue = dart.privateName(shared_preferences, "_setValue");
  shared_preferences.SharedPreferences = class SharedPreferences extends core.Object {
    static ['_#_#tearOff'](_preferenceCache) {
      return new shared_preferences.SharedPreferences.__(_preferenceCache);
    }
    static get _store() {
      return shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance;
    }
    static setPrefix(prefix, opts) {
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      if (shared_preferences.SharedPreferences._completer != null) {
        dart.throw(new core.StateError.new("setPrefix cannot be called after getInstance"));
      }
      shared_preferences.SharedPreferences._prefix = prefix;
      shared_preferences.SharedPreferences._prefixHasBeenChanged = true;
      shared_preferences.SharedPreferences._allowList = allowList;
    }
    static resetStatic() {
      shared_preferences.SharedPreferences._completer = null;
      shared_preferences.SharedPreferences._prefix = "flutter.";
      shared_preferences.SharedPreferences._prefixHasBeenChanged = false;
      shared_preferences.SharedPreferences._allowList = null;
    }
    static getInstance() {
      return async.async(shared_preferences.SharedPreferences, function* getInstance() {
        if (shared_preferences.SharedPreferences._completer == null) {
          let completer = T.CompleterOfSharedPreferences().new();
          shared_preferences.SharedPreferences._completer = completer;
          try {
            let preferencesMap = (yield shared_preferences.SharedPreferences._getSharedPreferencesMap());
            completer.complete(new shared_preferences.SharedPreferences.__(preferencesMap));
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
              completer.completeError(e);
              let sharedPrefsFuture = completer.future;
              shared_preferences.SharedPreferences._completer = null;
              return sharedPrefsFuture;
            } else
              throw e$;
          }
        }
        return dart.nullCheck(shared_preferences.SharedPreferences._completer).future;
      });
    }
    getKeys() {
      return T.LinkedHashSetOfString().from(this[_preferenceCache$][$keys]);
    }
    get(key) {
      return this[_preferenceCache$][$_get](key);
    }
    getBool(key) {
      return T.boolN().as(this[_preferenceCache$][$_get](key));
    }
    getInt(key) {
      return T.intN().as(this[_preferenceCache$][$_get](key));
    }
    getDouble(key) {
      return T.doubleN().as(this[_preferenceCache$][$_get](key));
    }
    getString(key) {
      return T.StringN().as(this[_preferenceCache$][$_get](key));
    }
    containsKey(key) {
      return this[_preferenceCache$][$containsKey](key);
    }
    getStringList(key) {
      let t2;
      let list = T.ListN().as(this[_preferenceCache$][$_get](key));
      if (list != null && !T.ListOfString().is(list)) {
        list = list[$cast](core.String)[$toList]();
        this[_preferenceCache$][$_set](key, list);
      }
      return T.ListNOfString().as((t2 = list, t2 == null ? null : t2[$toList]()));
    }
    setBool(key, value) {
      return this[_setValue]("Bool", key, value);
    }
    setInt(key, value) {
      return this[_setValue]("Int", key, value);
    }
    setDouble(key, value) {
      return this[_setValue]("Double", key, value);
    }
    setString(key, value) {
      return this[_setValue]("String", key, value);
    }
    setStringList(key, value) {
      return this[_setValue]("StringList", key, value);
    }
    remove(key) {
      let prefixedKey = shared_preferences.SharedPreferences._prefix + key;
      this[_preferenceCache$][$remove](key);
      return shared_preferences.SharedPreferences._store.remove(prefixedKey);
    }
    [_setValue](valueType, key, value) {
      core.ArgumentError.checkNotNull(core.Object, value, "value");
      let prefixedKey = shared_preferences.SharedPreferences._prefix + key;
      if (T.ListOfString().is(value)) {
        this[_preferenceCache$][$_set](key, value[$toList]());
      } else {
        this[_preferenceCache$][$_set](key, value);
      }
      return shared_preferences.SharedPreferences._store.setValue(valueType, prefixedKey, value);
    }
    commit() {
      return async.async(core.bool, function* commit() {
        return true;
      });
    }
    clear() {
      this[_preferenceCache$][$clear]();
      if (shared_preferences.SharedPreferences._prefixHasBeenChanged) {
        try {
          return shared_preferences.SharedPreferences._store.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: shared_preferences.SharedPreferences._prefix, allowList: shared_preferences.SharedPreferences._allowList})}));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            if (core.UnimplementedError.is(e)) {
              dart.throw(new core.UnimplementedError.new("This implementation of Shared Preferences doesn't yet support the setPrefix method.\nEither update the implementation to support setPrefix, or do not call setPrefix.\n        "));
            } else {
              dart.rethrow(e$);
            }
          } else
            throw e$;
        }
      }
      return shared_preferences.SharedPreferences._store.clear();
    }
    reload() {
      return async.async(dart.void, (function* reload() {
        let preferences = (yield shared_preferences.SharedPreferences._getSharedPreferencesMap());
        this[_preferenceCache$][$clear]();
        this[_preferenceCache$][$addAll](preferences);
      }).bind(this));
    }
    static _getSharedPreferencesMap() {
      return async.async(T.MapOfString$Object(), function* _getSharedPreferencesMap() {
        let fromSystem = new (T.IdentityMapOfString$Object()).new();
        if (shared_preferences.SharedPreferences._prefixHasBeenChanged) {
          try {
            fromSystem[$addAll](yield shared_preferences.SharedPreferences._store.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: shared_preferences.SharedPreferences._prefix, allowList: shared_preferences.SharedPreferences._allowList})})));
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
              if (core.UnimplementedError.is(e)) {
                dart.throw(new core.UnimplementedError.new("This implementation of Shared Preferences doesn't yet support the setPrefix method.\nEither update the implementation to support setPrefix, or do not call setPrefix.\n        "));
              } else {
                dart.rethrow(e$);
              }
            } else
              throw e$;
          }
        } else {
          fromSystem[$addAll](yield shared_preferences.SharedPreferences._store.getAll());
        }
        if (shared_preferences.SharedPreferences._prefix[$isEmpty]) {
          return fromSystem;
        }
        let preferencesMap = new (T.IdentityMapOfString$Object()).new();
        for (let key of fromSystem[$keys]) {
          if (!key[$startsWith](shared_preferences.SharedPreferences._prefix)) dart.assertFailed(null, I[1], 264, 14, "key.startsWith(_prefix)");
          preferencesMap[$_set](key[$substring](shared_preferences.SharedPreferences._prefix.length), dart.nullCheck(fromSystem[$_get](key)));
        }
        return preferencesMap;
      });
    }
    static setMockInitialValues(values) {
      let newValues = values[$map](core.String, core.Object, dart.fn((key, value) => {
        let newKey = key;
        if (!key[$startsWith](shared_preferences.SharedPreferences._prefix)) {
          newKey = shared_preferences.SharedPreferences._prefix + key;
        }
        return new (T.MapEntryOfString$Object()).__(newKey, value);
      }, T.StringAndObjectToMapEntryOfString$Object()));
      shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance = new shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData(newValues);
      shared_preferences.SharedPreferences._completer = null;
    }
  };
  (shared_preferences.SharedPreferences.__ = function(_preferenceCache) {
    this[_preferenceCache$] = _preferenceCache;
    ;
  }).prototype = shared_preferences.SharedPreferences.prototype;
  dart.addTypeTests(shared_preferences.SharedPreferences);
  dart.addTypeCaches(shared_preferences.SharedPreferences);
  dart.setMethodSignature(shared_preferences.SharedPreferences, () => ({
    __proto__: dart.getMethods(shared_preferences.SharedPreferences.__proto__),
    getKeys: dart.fnType(core.Set$(core.String), []),
    get: dart.fnType(dart.nullable(core.Object), [core.String]),
    getBool: dart.fnType(dart.nullable(core.bool), [core.String]),
    getInt: dart.fnType(dart.nullable(core.int), [core.String]),
    getDouble: dart.fnType(dart.nullable(core.double), [core.String]),
    getString: dart.fnType(dart.nullable(core.String), [core.String]),
    containsKey: dart.fnType(core.bool, [core.String]),
    getStringList: dart.fnType(dart.nullable(core.List$(core.String)), [core.String]),
    setBool: dart.fnType(async.Future$(core.bool), [core.String, core.bool]),
    setInt: dart.fnType(async.Future$(core.bool), [core.String, core.int]),
    setDouble: dart.fnType(async.Future$(core.bool), [core.String, core.double]),
    setString: dart.fnType(async.Future$(core.bool), [core.String, core.String]),
    setStringList: dart.fnType(async.Future$(core.bool), [core.String, core.List$(core.String)]),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    [_setValue]: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object]),
    commit: dart.fnType(async.Future$(core.bool), []),
    clear: dart.fnType(async.Future$(core.bool), []),
    reload: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setStaticMethodSignature(shared_preferences.SharedPreferences, () => ['setPrefix', 'resetStatic', 'getInstance', '_getSharedPreferencesMap', 'setMockInitialValues']);
  dart.setStaticGetterSignature(shared_preferences.SharedPreferences, () => ['_store']);
  dart.setLibraryUri(shared_preferences.SharedPreferences, I[2]);
  dart.setFieldSignature(shared_preferences.SharedPreferences, () => ({
    __proto__: dart.getFields(shared_preferences.SharedPreferences.__proto__),
    [_preferenceCache$]: dart.finalFieldType(core.Map$(core.String, core.Object))
  }));
  dart.setStaticFieldSignature(shared_preferences.SharedPreferences, () => ['_prefix', '_prefixHasBeenChanged', '_allowList', '_completer']);
  dart.defineLazy(shared_preferences.SharedPreferences, {
    /*shared_preferences.SharedPreferences._prefix*/get _prefix() {
      return "flutter.";
    },
    set _prefix(value) {},
    /*shared_preferences.SharedPreferences._prefixHasBeenChanged*/get _prefixHasBeenChanged() {
      return false;
    },
    set _prefixHasBeenChanged(value) {},
    /*shared_preferences.SharedPreferences._allowList*/get _allowList() {
      return null;
    },
    set _allowList(value) {},
    /*shared_preferences.SharedPreferences._completer*/get _completer() {
      return null;
    },
    set _completer(value) {}
  }, false);
  var _getFilteredKeys = dart.privateName(shared_preferences_web, "_getFilteredKeys");
  var _decodeValue = dart.privateName(shared_preferences_web, "_decodeValue");
  var _encodeValue = dart.privateName(shared_preferences_web, "_encodeValue");
  plugin_platform_interface.PlatformInterface = class PlatformInterface extends core.Object {
    static verify(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: true});
    }
    static verifyToken(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: false});
    }
    static _verify(instance, token, opts) {
      let preventConstObject = opts && 'preventConstObject' in opts ? opts.preventConstObject : null;
      if (plugin_platform_interface.MockPlatformInterfaceMixin.is(instance)) {
        let assertionsEnabled = false;
        if (!dart.fn(() => {
          assertionsEnabled = true;
          return true;
        }, T.VoidTobool())()) dart.assertFailed(null, I[3], 92, 14, "() {\n        assertionsEnabled = true;\n        return true;\n      }()");
        if (!assertionsEnabled) {
          dart.throw(new core.AssertionError.new("`MockPlatformInterfaceMixin` is not intended for use in release builds."));
        }
        return;
      }
      if (preventConstObject && plugin_platform_interface.PlatformInterface._instanceTokens._get(instance) === (C[5] || CT.C5)) {
        dart.throw(new core.AssertionError.new("`const Object()` cannot be used as the token."));
      }
      if (token !== plugin_platform_interface.PlatformInterface._instanceTokens._get(instance)) {
        dart.throw(new core.AssertionError.new("Platform interfaces must not be implemented with `implements`"));
      }
    }
  };
  (plugin_platform_interface.PlatformInterface.new = function(opts) {
    let token = opts && 'token' in opts ? opts.token : null;
    plugin_platform_interface.PlatformInterface._instanceTokens._set(this, token);
  }).prototype = plugin_platform_interface.PlatformInterface.prototype;
  dart.addTypeTests(plugin_platform_interface.PlatformInterface);
  dart.addTypeCaches(plugin_platform_interface.PlatformInterface);
  dart.setStaticMethodSignature(plugin_platform_interface.PlatformInterface, () => ['verify', 'verifyToken', '_verify']);
  dart.setLibraryUri(plugin_platform_interface.PlatformInterface, I[4]);
  dart.setStaticFieldSignature(plugin_platform_interface.PlatformInterface, () => ['_instanceTokens']);
  dart.defineLazy(plugin_platform_interface.PlatformInterface, {
    /*plugin_platform_interface.PlatformInterface._instanceTokens*/get _instanceTokens() {
      return new (T.ExpandoOfObject()).new();
    }
  }, false);
  shared_preferences_platform_interface.SharedPreferencesStorePlatform = class SharedPreferencesStorePlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      return shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance;
    }
    static set instance(instance) {
      if (!instance.isMock) {
        plugin_platform_interface.PlatformInterface.verify(instance, shared_preferences_platform_interface.SharedPreferencesStorePlatform._token);
      }
      shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance = instance;
    }
    get isMock() {
      return false;
    }
    clearWithPrefix(prefix) {
      dart.throw(new core.UnimplementedError.new("clearWithPrefix is not implemented."));
    }
    clearWithParameters(parameters) {
      dart.throw(new core.UnimplementedError.new("clearWithParameters is not implemented."));
    }
    getAllWithPrefix(prefix) {
      dart.throw(new core.UnimplementedError.new("getAllWithPrefix is not implemented."));
    }
    getAllWithParameters(parameters) {
      dart.throw(new core.UnimplementedError.new("getAllWithParameters is not implemented."));
    }
  };
  (shared_preferences_platform_interface.SharedPreferencesStorePlatform.new = function() {
    shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__.new.call(this, {token: shared_preferences_platform_interface.SharedPreferencesStorePlatform._token});
    ;
  }).prototype = shared_preferences_platform_interface.SharedPreferencesStorePlatform.prototype;
  dart.addTypeTests(shared_preferences_platform_interface.SharedPreferencesStorePlatform);
  dart.addTypeCaches(shared_preferences_platform_interface.SharedPreferencesStorePlatform);
  dart.setMethodSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ({
    __proto__: dart.getMethods(shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__),
    clearWithPrefix: dart.fnType(async.Future$(core.bool), [core.String]),
    clearWithParameters: dart.fnType(async.Future$(core.bool), [types.ClearParameters]),
    getAllWithPrefix: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [core.String]),
    getAllWithParameters: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [types.GetAllParameters])
  }));
  dart.setGetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ({
    __proto__: dart.getGetters(shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__),
    isMock: core.bool
  }));
  dart.setStaticGetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['instance']);
  dart.setStaticSetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['instance']);
  dart.setLibraryUri(shared_preferences_platform_interface.SharedPreferencesStorePlatform, I[5]);
  dart.setStaticFieldSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['_token', '_instance']);
  dart.defineLazy(shared_preferences_platform_interface.SharedPreferencesStorePlatform, {
    /*shared_preferences_platform_interface.SharedPreferencesStorePlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance*/get _instance() {
      return new method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new();
    },
    set _instance(value) {}
  }, false);
  shared_preferences_web.SharedPreferencesPlugin = class SharedPreferencesPlugin extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    static registerWith(registrar) {
      shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance = new shared_preferences_web.SharedPreferencesPlugin.new();
    }
    clear() {
      return async.async(core.bool, (function* clear() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    clearWithPrefix(prefix) {
      return async.async(core.bool, (function* clearWithPrefix() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    clearWithParameters(parameters) {
      return async.async(core.bool, (function* clearWithParameters() {
        let filter = parameters.filter;
        this[_getFilteredKeys](filter.prefix, {allowList: filter.allowList})[$forEach](dart.bind(html.window[$localStorage], $remove));
        return true;
      }).bind(this));
    }
    getAll() {
      return async.async(T.MapOfString$Object(), (function* getAll() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    getAllWithPrefix(prefix) {
      return async.async(T.MapOfString$Object(), (function* getAllWithPrefix() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    getAllWithParameters(parameters) {
      return async.async(T.MapOfString$Object(), (function* getAllWithParameters() {
        let filter = parameters.filter;
        let allData = new (T.IdentityMapOfString$Object()).new();
        for (let key of this[_getFilteredKeys](filter.prefix, {allowList: filter.allowList})) {
          allData[$_set](key, this[_decodeValue](dart.nullCheck(html.window[$localStorage][$_get](key))));
        }
        return allData;
      }).bind(this));
    }
    remove(key) {
      return async.async(core.bool, function* remove() {
        html.window[$localStorage][$remove](key);
        return true;
      });
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, (function* setValue() {
        html.window[$localStorage][$_set](key, this[_encodeValue](value));
        return true;
      }).bind(this));
    }
    [_getFilteredKeys](prefix, opts) {
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      return html.window[$localStorage][$keys][$where](dart.fn(key => {
        let t4, t4$;
        return key[$startsWith](prefix) && dart.test((t4$ = (t4 = allowList, t4 == null ? null : t4.contains(key)), t4$ == null ? true : t4$));
      }, T.StringTobool()));
    }
    [_encodeValue](value) {
      return convert.json.encode(value);
    }
    [_decodeValue](encodedValue) {
      let decodedValue = convert.json.decode(encodedValue);
      if (core.List.is(decodedValue)) {
        return decodedValue[$cast](core.String);
      }
      return dart.nullCheck(decodedValue);
    }
    static ['_#new#tearOff']() {
      return new shared_preferences_web.SharedPreferencesPlugin.new();
    }
  };
  (shared_preferences_web.SharedPreferencesPlugin.new = function() {
    shared_preferences_web.SharedPreferencesPlugin.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_web.SharedPreferencesPlugin.prototype;
  dart.addTypeTests(shared_preferences_web.SharedPreferencesPlugin);
  dart.addTypeCaches(shared_preferences_web.SharedPreferencesPlugin);
  dart.setMethodSignature(shared_preferences_web.SharedPreferencesPlugin, () => ({
    __proto__: dart.getMethods(shared_preferences_web.SharedPreferencesPlugin.__proto__),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, dart.nullable(core.Object)]),
    [_getFilteredKeys]: dart.fnType(core.Iterable$(core.String), [core.String], {allowList: dart.nullable(core.Set$(core.String))}, {}),
    [_encodeValue]: dart.fnType(core.String, [dart.nullable(core.Object)]),
    [_decodeValue]: dart.fnType(core.Object, [core.String])
  }));
  dart.setStaticMethodSignature(shared_preferences_web.SharedPreferencesPlugin, () => ['registerWith']);
  dart.setLibraryUri(shared_preferences_web.SharedPreferencesPlugin, I[6]);
  dart.setStaticFieldSignature(shared_preferences_web.SharedPreferencesPlugin, () => ['_defaultPrefix']);
  dart.defineLazy(shared_preferences_web.SharedPreferencesPlugin, {
    /*shared_preferences_web.SharedPreferencesPlugin._defaultPrefix*/get _defaultPrefix() {
      return "flutter.";
    }
  }, false);
  var _data = dart.privateName(shared_preferences_platform_interface, "_data");
  shared_preferences_platform_interface.InMemorySharedPreferencesStore = class InMemorySharedPreferencesStore extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    static ['_#empty#tearOff']() {
      return new shared_preferences_platform_interface.InMemorySharedPreferencesStore.empty();
    }
    static ['_#withData#tearOff'](data) {
      return new shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData(data);
    }
    clear() {
      return async.async(core.bool, (function* clear() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    clearWithPrefix(prefix) {
      return async.async(core.bool, (function* clearWithPrefix() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    clearWithParameters(parameters) {
      return async.async(core.bool, (function* clearWithParameters() {
        let filter = parameters.filter;
        if (filter.allowList != null) {
          this[_data][$removeWhere](dart.fn((key, _) => key[$startsWith](filter.prefix) && dart.nullCheck(filter.allowList).contains(key), T.StringAndObjectTobool()));
        } else {
          this[_data][$removeWhere](dart.fn((key, _) => key[$startsWith](filter.prefix), T.StringAndObjectTobool()));
        }
        return true;
      }).bind(this));
    }
    getAll() {
      return async.async(T.MapOfString$Object(), (function* getAll() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    getAllWithPrefix(prefix) {
      return async.async(T.MapOfString$Object(), (function* getAllWithPrefix() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    getAllWithParameters(parameters) {
      return async.async(T.MapOfString$Object(), (function* getAllWithParameters() {
        let filter = parameters.filter;
        let preferences = T.LinkedHashMapOfString$Object().from(this[_data]);
        preferences[$removeWhere](dart.fn((key, _) => !key[$startsWith](filter.prefix) || filter.allowList != null && !dart.nullCheck(filter.allowList).contains(key), T.StringAndObjectTobool()));
        return preferences;
      }).bind(this));
    }
    remove(key) {
      return async.async(core.bool, (function* remove() {
        this[_data][$remove](key);
        return true;
      }).bind(this));
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, (function* setValue() {
        this[_data][$_set](key, value);
        return true;
      }).bind(this));
    }
  };
  (shared_preferences_platform_interface.InMemorySharedPreferencesStore.empty = function() {
    this[_data] = new (T.IdentityMapOfString$Object()).new();
    shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_platform_interface.InMemorySharedPreferencesStore.prototype;
  (shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData = function(data) {
    this[_data] = T.LinkedHashMapOfString$Object().from(data);
    shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_platform_interface.InMemorySharedPreferencesStore.prototype;
  dart.addTypeTests(shared_preferences_platform_interface.InMemorySharedPreferencesStore);
  dart.addTypeCaches(shared_preferences_platform_interface.InMemorySharedPreferencesStore);
  dart.setMethodSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ({
    __proto__: dart.getMethods(shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object])
  }));
  dart.setLibraryUri(shared_preferences_platform_interface.InMemorySharedPreferencesStore, I[5]);
  dart.setFieldSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ({
    __proto__: dart.getFields(shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__),
    [_data]: dart.finalFieldType(core.Map$(core.String, core.Object))
  }));
  dart.setStaticFieldSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ['_defaultPrefix']);
  dart.defineLazy(shared_preferences_platform_interface.InMemorySharedPreferencesStore, {
    /*shared_preferences_platform_interface.InMemorySharedPreferencesStore._defaultPrefix*/get _defaultPrefix() {
      return "flutter.";
    }
  }, false);
  var prefix$ = dart.privateName(types, "PreferencesFilter.prefix");
  var allowList$ = dart.privateName(types, "PreferencesFilter.allowList");
  types.PreferencesFilter = class PreferencesFilter extends core.Object {
    get prefix() {
      return this[prefix$];
    }
    set prefix(value) {
      this[prefix$] = value;
    }
    get allowList() {
      return this[allowList$];
    }
    set allowList(value) {
      this[allowList$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      return new types.PreferencesFilter.new({prefix: prefix, allowList: allowList});
    }
  };
  (types.PreferencesFilter.new = function(opts) {
    let prefix = opts && 'prefix' in opts ? opts.prefix : null;
    let allowList = opts && 'allowList' in opts ? opts.allowList : null;
    this[prefix$] = prefix;
    this[allowList$] = allowList;
    ;
  }).prototype = types.PreferencesFilter.prototype;
  dart.addTypeTests(types.PreferencesFilter);
  dart.addTypeCaches(types.PreferencesFilter);
  dart.setLibraryUri(types.PreferencesFilter, I[7]);
  dart.setFieldSignature(types.PreferencesFilter, () => ({
    __proto__: dart.getFields(types.PreferencesFilter.__proto__),
    prefix: dart.fieldType(core.String),
    allowList: dart.fieldType(dart.nullable(core.Set$(core.String)))
  }));
  var filter$ = dart.privateName(types, "GetAllParameters.filter");
  types.GetAllParameters = class GetAllParameters extends core.Object {
    get filter() {
      return this[filter$];
    }
    set filter(value) {
      this[filter$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return new types.GetAllParameters.new({filter: filter});
    }
  };
  (types.GetAllParameters.new = function(opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    this[filter$] = filter;
    ;
  }).prototype = types.GetAllParameters.prototype;
  dart.addTypeTests(types.GetAllParameters);
  dart.addTypeCaches(types.GetAllParameters);
  dart.setLibraryUri(types.GetAllParameters, I[7]);
  dart.setFieldSignature(types.GetAllParameters, () => ({
    __proto__: dart.getFields(types.GetAllParameters.__proto__),
    filter: dart.fieldType(types.PreferencesFilter)
  }));
  var filter$0 = dart.privateName(types, "ClearParameters.filter");
  types.ClearParameters = class ClearParameters extends core.Object {
    get filter() {
      return this[filter$0];
    }
    set filter(value) {
      this[filter$0] = value;
    }
    static ['_#new#tearOff'](opts) {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return new types.ClearParameters.new({filter: filter});
    }
  };
  (types.ClearParameters.new = function(opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    this[filter$0] = filter;
    ;
  }).prototype = types.ClearParameters.prototype;
  dart.addTypeTests(types.ClearParameters);
  dart.addTypeCaches(types.ClearParameters);
  dart.setLibraryUri(types.ClearParameters, I[7]);
  dart.setFieldSignature(types.ClearParameters, () => ({
    __proto__: dart.getFields(types.ClearParameters.__proto__),
    filter: dart.fieldType(types.PreferencesFilter)
  }));
  plugin_platform_interface.MockPlatformInterfaceMixin = class MockPlatformInterfaceMixin extends core.Object {};
  (plugin_platform_interface.MockPlatformInterfaceMixin.new = function() {
    ;
  }).prototype = plugin_platform_interface.MockPlatformInterfaceMixin.prototype;
  dart.addTypeTests(plugin_platform_interface.MockPlatformInterfaceMixin);
  dart.addTypeCaches(plugin_platform_interface.MockPlatformInterfaceMixin);
  plugin_platform_interface.MockPlatformInterfaceMixin[dart.implements] = () => [plugin_platform_interface.PlatformInterface];
  dart.setLibraryUri(plugin_platform_interface.MockPlatformInterfaceMixin, I[4]);
  method_channel_shared_preferences.MethodChannelSharedPreferencesStore = class MethodChannelSharedPreferencesStore extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    remove(key) {
      return async.async(core.bool, function* remove() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "remove", new (T.IdentityMapOfString$dynamic()).from(["key", key])));
      });
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, function* setValue() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "set" + valueType, new (T.IdentityMapOfString$dynamic()).from(["key", key, "value", value])));
      });
    }
    clear() {
      return async.async(core.bool, function* clear() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "clear"));
      });
    }
    clearWithPrefix(prefix) {
      return async.async(core.bool, (function* clearWithPrefix() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    clearWithParameters(parameters) {
      return async.async(core.bool, function* clearWithParameters() {
        let t4;
        let filter = parameters.filter;
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "clearWithParameters", new (T.IdentityMapOfString$dynamic()).from(["prefix", filter.prefix, "allowList", (t4 = filter.allowList, t4 == null ? null : t4[$toList]())])));
      });
    }
    getAll() {
      return async.async(T.MapOfString$Object(), function* getAll() {
        let t4;
        t4 = (yield method_channel_shared_preferences._kChannel.invokeMapMethod(core.String, core.Object, "getAll"));
        return t4 == null ? new (T.IdentityMapOfString$Object()).new() : t4;
      });
    }
    getAllWithPrefix(prefix, opts) {
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      return async.async(T.MapOfString$Object(), (function* getAllWithPrefix() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    getAllWithParameters(parameters) {
      return async.async(T.MapOfString$Object(), function* getAllWithParameters() {
        let t4, t4$;
        let filter = parameters.filter;
        let allowListAsList = (t4 = filter.allowList, t4 == null ? null : t4[$toList]());
        t4$ = (yield method_channel_shared_preferences._kChannel.invokeMapMethod(core.String, core.Object, "getAllWithParameters", new (T.IdentityMapOfString$dynamic()).from(["prefix", filter.prefix, "allowList", allowListAsList])));
        return t4$ == null ? new (T.IdentityMapOfString$Object()).new() : t4$;
      });
    }
    static ['_#new#tearOff']() {
      return new method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new();
    }
  };
  (method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new = function() {
    method_channel_shared_preferences.MethodChannelSharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = method_channel_shared_preferences.MethodChannelSharedPreferencesStore.prototype;
  dart.addTypeTests(method_channel_shared_preferences.MethodChannelSharedPreferencesStore);
  dart.addTypeCaches(method_channel_shared_preferences.MethodChannelSharedPreferencesStore);
  dart.setMethodSignature(method_channel_shared_preferences.MethodChannelSharedPreferencesStore, () => ({
    __proto__: dart.getMethods(method_channel_shared_preferences.MethodChannelSharedPreferencesStore.__proto__),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object]),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    getAllWithPrefix: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [core.String], {allowList: dart.nullable(core.Set$(core.String))}, {})
  }));
  dart.setLibraryUri(method_channel_shared_preferences.MethodChannelSharedPreferencesStore, I[8]);
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  dart.defineLazy(method_channel_shared_preferences, {
    /*method_channel_shared_preferences._kChannel*/get _kChannel() {
      return C[6] || CT.C6;
    }
  }, false);
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "package:shared_preferences/shared_preferences.dart": shared_preferences,
    "package:shared_preferences_web/shared_preferences_web.dart": shared_preferences_web,
    "package:shared_preferences_platform_interface/shared_preferences_platform_interface.dart": shared_preferences_platform_interface,
    "package:shared_preferences_platform_interface/types.dart": types,
    "package:plugin_platform_interface/plugin_platform_interface.dart": plugin_platform_interface,
    "package:shared_preferences_platform_interface/method_channel_shared_preferences.dart": method_channel_shared_preferences
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences-2.2.2/lib/shared_preferences.dart","/zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.6/lib/plugin_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.3.1/lib/shared_preferences_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_web-2.2.1/lib/shared_preferences_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.3.1/lib/types.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.3.1/lib/method_channel_shared_preferences.dart"],"names":[],"mappings":"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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    shared_preferences: shared_preferences,
    shared_preferences_web: shared_preferences_web,
    shared_preferences_platform_interface: shared_preferences_platform_interface,
    types: types,
    plugin_platform_interface: plugin_platform_interface,
    method_channel_shared_preferences: method_channel_shared_preferences
  };
}));

//# sourceMappingURL=main.js.map
